// Replace with your contract address and ABI
const contractAddress = '0xcd76037fa0b87C4E29FD835c0dA69269c3E8B5F8';
const contractABI = [[
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "expDate",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			}
		],
		"name": "createMedicine",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "expDate",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			}
		],
		"name": "MedicineCreated",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "checkMedicineExists",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "getMedicine",
		"outputs": [
			{
				"components": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "expDate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"internalType": "struct MedicineRegistry.Medicine",
				"name": "",
				"type": "tuple"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "medicineCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "medicines",
		"outputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "expDate",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]
    // Add the ABI for your contract here
];

// Initialize web3 provider (e.g., Metamask)
const web3 = new Web3(window.ethereum);

// Initialize the contract
const contract = new web3.eth.Contract(contractABI, contractAddress);

// Define your HTML elements for interaction
const nameInput = document.getElementById('name');
const expDateInput = document.getElementById('expDate');
const priceInput = document.getElementById('price');
const createButton = document.getElementById('createButton');
const idInput = document.getElementById('id');
const getButton = document.getElementById('getButton');
const checkButton = document.getElementById('checkButton');
const resultDiv = document.getElementById('result');

// Create Medicine button
createButton.addEventListener('click', async () => {
    const name = nameInput.value;
    const expDate = parseInt(expDateInput.value);
    const price = parseInt(priceInput.value);

    try {
        // Send a transaction to the smart contract to create a medicine
        const accounts = await web3.eth.getAccounts();
        await contract.methods.createMedicine(name, expDate, price).send({ from: accounts[0] });
        resultDiv.innerHTML = 'Medicine created successfully!';
    } catch (error) {
        console.error(error);
        resultDiv.innerHTML = 'Error creating medicine';
    }
});

// Get Medicine button
getButton.addEventListener('click', async () => {
    const id = parseInt(idInput.value);
    try {
        // Call the smart contract to retrieve medicine details
        const medicine = await contract.methods.getMedicine(id).call();
        resultDiv.innerHTML = `Medicine Name: ${medicine.name}, Expiry Date: ${medicine.expDate}, Price: ${medicine.price}`;
    } catch (error) {
        console.error(error);
        resultDiv.innerHTML = 'Error retrieving medicine';
    }
});

// Check Medicine button
checkButton.addEventListener('click', async () => {
    const id = parseInt(idInput.value);
    try {
        // Call the smart contract to check if medicine exists
        const exists = await contract.methods.checkMedicineExists(id).call();
        resultDiv.innerHTML = exists ? 'Medicine exists' : 'Medicine does not exist';
    } catch (error) {
        console.error(error);
        resultDiv.innerHTML = 'Error checking medicine existence';
    }
});